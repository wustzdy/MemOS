import json
import os
import sys

src_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', 'src'))
sys.path.insert(0, src_path)

from memos.configs.graph_db import GraphDBConfigFactory
from memos.graph_dbs.factory import GraphStoreFactory
import psycopg2

import psycopg2


def handler_node_edge(db_name: str = "shared-traval-group-complex", type: str = "node"):
    if type == "node":
        run_user_session_node(
            db_name=db_name,
        )
    elif type == "edge":
        run_user_session_edges(
            db_name=db_name,
        )


DB_CONFIG = {
    'host': 'xxxxxxx',
    'port': 5432,
    'database': 'xxxxx',
    'user': 'xxxx',
    'password': 'xxxx'
}


def run_user_session_node(db_name: str, ):
    graph = getGraph(db_name)
    exported = graph.export_graph(include_embedding=True)
    nodes = exported.get('nodes', [])
    print(f"查询数据数量:{len(nodes)}")
    list = []

    conn = psycopg2.connect(**DB_CONFIG)
    print("✅ 数据库连接成功")

    # create_vector_extension(conn)
    # create_table(conn)
    # insert_data(conn, nodes)
    # for node in nodes:
    #     metadata = node.get('metadata')
    #     # embedding_1024 = metadata.get('embedding_1024')
    #     # if embedding_1024:
    #     #     metadata['embedding_1024'] = None
    #     metadata['id'] = node.get('id')
    #     metadata['memory'] = node.get('memory')
    #     list.append(metadata)
    print("nodes:", list)


def run_user_session_edges(db_name: str, ):
    graph = getGraph(db_name)
    exported = graph.export_graph()
    nodes = exported.get('nodes', [])
    list = []
    edges = exported.get('edges', [])
    for i, edge in edges:
        source = edge.get('source')
        target = edge.get('target')
        edge_type = edge.get('type')
        print(f"剩余{i}条边")
    print("edges:", list)


def getGraph(db_name):
    config = GraphDBConfigFactory(
        backend="nebular",
        config={
            "uri": json.loads(os.getenv("NEBULAR_HOSTS", "localhost")),
            "user": os.getenv("NEBULAR_USER", "root"),
            "password": os.getenv("NEBULAR_PASSWORD", "xxxxxx"),
            "space": db_name,
            "use_multi_db": False,
            "auto_create": True,
            "embedding_dimension": 1024,
        },
    )
    graph = GraphStoreFactory.from_config(config)
    return graph


def getPolarDb(db_name):
    config = GraphDBConfigFactory(
        backend="polardb",
        config={
            "host": "memory.pg.polardb.rds.aliyuncs.com",
            "port": 5432,
            "user": "adimin",
            "password": "Openmem0925",
            "db_name": db_name,
            "user_name": 'adimin',
            "use_multi_db": True,  # 设置为True，不添加user_name过滤条件
            "auto_create": True,
            "embedding_dimension": 1024,
        },
    )
    graph = GraphStoreFactory.from_config(config)
    return graph


def searchVector(db_name: str, vectorStr: list[float], user_name: str = None):
    graph = getPolarDb(db_name)

    # 1，查询search_by_embedding
    nodes = graph.search_by_embedding(vector=vectorStr, top_k=1, user_name=user_name)
    print("search_by_embedding nodes:", len(nodes))
    for node_i in nodes:
        print("Search result:", graph.get_node(node_i["id"][1:-1]))

    # 2，查询单个get_node
    # detail = graph.get_node(id="194f1e30-44d2-4e3f-bc58-c950343c56b7",
    #                         user_name='memos231a22c655fd4b859ca4143b97d2b808')
    # print("单个node:", detail)
    #
    # # 3，查询多个get_nodes
    ids = ['bb079c5b-1937-4125-a9e5-55d4abe6c95d', 'd66120af-992b-44c6-b261-a6ebe6bc57a5']
    ids = ['"bfde036f-6276-4485-9dc6-3c64eab3e132"']
    detail_list = graph.get_nodes(ids=ids,user_name='memos7a9f9fbbb61c412f94f77fbaa8103c35')
    print("1111多个node:", len(detail_list))
    #
    print("多个node:", detail_list)

    # 4，更新 update_node
    # graph.update_node(id="000009999ef-926f-42e2-b7b5-0224daf0abcd", fields={"name": "new_name"})

    # 4，查询 get_memory_count
    # count = graph.get_memory_count('UserMemory','memos07ba3d044650474c839e721f3a69d38a')
    # print("user count:", count)
    # #
    # # 4，判断node是否存在 node_not_exist 1代表存在，
    # isNodeExist = graph.node_not_exist('UserMemory', 'memos07ba3d044650474c839e721f3a69d38a')
    # print("user isNodeExist:", isNodeExist)
    #
    # # 6,删除跳过多少行之后的数据remove_oldest_memory
    # remove_oldest_memory = graph.remove_oldest_memory('UserMemory', 2,'memos07ba3d044650474c839e721f3a69d38a')
    # print("user remove_oldest_memory:", remove_oldest_memory)

    # 7，更新 update_node
    # isNodeExist = graph.update_node(id="bb079c5b-1937-4125-a9e5-55d4abe6c95d", fields={"status": "inactived","tags": ["yoga", "travel11111111", "local studios5667888"]})
    # print("user update_node:", isNodeExist)

    # 8，删除 delete_node
    # isNodeDeleted = graph.delete_node(id="bb079c5b-1937-4125-a9e5-55d4abe6c95d", user_name='memosbfb3fb32032b4077a641404dc48739cd')
    # print("user isNodeDeleted:", isNodeDeleted)


# 9，添加边 add_edge
def add_edge(db_name: str, source_id: str, target_id: str, edge_type: str = "Memory", user_name: str = None):
    graph = getPolarDb(db_name)
    graph.add_edge(source_id, target_id, edge_type, user_name)


def edge_exists(db_name: str, source_id: str, target_id: str, type: str = "Memory", direction: str = "OUTGOING",
                user_name: str = None):
    graph = getPolarDb(db_name)
    isEdge_exists = graph.edge_exists(source_id=source_id, target_id=target_id, type=type, user_name=user_name,
                                      direction=direction)
    print("edge_exists:", isEdge_exists)


def get_children_with_embeddings(db_name: str, id: str, user_name: str = None):
    graph = getPolarDb(db_name)
    children = graph.get_children_with_embeddings(id=id, user_name=user_name)
    print("get_children_with_embedding:", children)


def get_subgraph(db_name, center_id, depth, center_status, user_name):
    graph = getPolarDb(db_name)
    subgraph = graph.get_subgraph(center_id, depth, center_status, user_name)
    print("111111get_subgraph:", subgraph)


def get_grouped_counts(db_name, user_name):
    graph = getPolarDb(db_name)
    grouped_counts = graph.get_grouped_counts(group_fields=["status"], where_clause="user_name = %s",
                                              params=[user_name], user_name=user_name)
    grouped_counts = graph.get_grouped_counts1(group_fields=["status"],
                                              params=[user_name], user_name=user_name)
    print("get_grouped_counts:", grouped_counts)


def export_graph(db_name, include_embedding, user_name):
    graph = getPolarDb(db_name)
    export_graphlist = graph.export_graph(include_embedding=include_embedding, user_name=user_name)
    print("export_graph:", export_graphlist)


def get_structure_optimization_candidates(db_name, scope, include_embedding, user_name):
    graph = getPolarDb(db_name)
    candidates = graph.get_structure_optimization_candidates(scope=scope, include_embedding=include_embedding, user_name=user_name)
    print("get_structure_optimization_candidates:", candidates)


def get_all_memory_items(db_name, scope, include_embedding, user_name):
    graph = getPolarDb(db_name)
    memory_items = graph.get_all_memory_items(scope=scope, include_embedding=include_embedding, user_name=user_name)
    print("get_all_memory_items:", memory_items)


if __name__ == "__main__":
    # handler_node_edge(db_name="shared-tree-textual-memory-product-0731",type="node")
    # handler_node_edge(db_name="shared-tree-textual-memory-product-0731",type="edge")
    vector = [-0.02954108, -0.024826104, -0.07641619, 0.01464847, -0.0032501293, -0.044220068, 0.024322564, 0.018768352,
              -0.0030803748, -0.017776528, 0.022201587, -0.0036640249, -0.013397247, -0.02462774, 0.021743823,
              0.0115509285, -0.023223927, 0.024093682, -0.0071144262, -0.014984163, -0.013305694, -0.022064257,
              0.055786256, -0.012374905, 0.019714398, 0.008865376, -0.00803377, -0.006851211, 0.036529623, 0.042785738,
              0.05923475, 0.007347123, 0.058776986, 0.03900155, -0.05065929, -0.060730115, 0.0042343233, -0.0030670234,
              -0.02864081, 0.047332868, -0.007789629, -0.011741664, 0.019638104, 0.007427232, -0.036529623,
              -0.034484938, -0.046203714, 0.009078999, -0.026367245, -0.049896352, 0.027938904, -0.048950303,
              0.04299936, -0.024597222, -0.018600505, 0.026321469, -0.03240974, -0.07080094, -0.058105595,
              -0.0026359616, -0.023757987, 0.014465364, -0.02682501, -0.014427217, -0.01814274, 0.07244889,
              -0.0063705584, 0.019378705, -0.05078136, -0.016525306, 0.013534576, -0.01814274, -0.016098058,
              0.018295329, -0.061645642, 0.023773246, 0.03549202, -0.034820635, 0.029464787, 0.026535092, -0.024398858,
              -0.004184732, 0.040374845, 0.0037460409, 0.014419587, -0.009384176, 0.010055564, 0.019546552, 0.023498587,
              -0.01620487, -0.013389617, -0.016418492, 0.028198304, -0.051117055, 0.023101857, 0.0705568, -0.03991708,
              -0.039428797, 0.006595626, 0.0039367764, 0.034515455, -0.02046208, -0.001202586, -0.018569987,
              -0.009666464, -0.018966716, -0.0052719233, 0.0012187985, 0.044403173, -0.018295329, 0.01890568,
              0.037994467, 0.020538375, 0.012939482, -0.0036048968, -0.01968388, -0.0021209763, 0.01451114, 0.024429375,
              -0.031311106, -0.017852822, -0.0057830936, 0.011459376, -0.020523116, -0.021209763, 0.0082550235,
              -0.0035057145, 0.031311106, 0.0063438555, 0.012374905, 0.028595034, 0.03552254, -0.041961763,
              0.0062675616, 0.030426092, -0.030548163, 0.058502328, 0.029205387, -0.02604681, -0.025756892, 0.004211435,
              0.05160534, 0.0092239585, -0.049987905, -0.0013847381, -0.055267457, 0.027282774, 0.012535123,
              -0.009971641, -0.0040741055, -0.022613576, 0.018478435, 0.026031552, 0.02720648, -0.04782115, 0.007400529,
              0.034851152, 0.042694185, -0.031005928, -0.0019149822, 0.00042104814, -0.0049972646, -0.02539068,
              0.031738352, 0.010337852, -0.036102373, 0.014213594, 0.011878993, 0.0008330364, -0.035583574,
              0.0034465867, -0.0082550235, 0.009887717, 0.012908964, 0.018875163, 0.01814274, 0.091552936, 0.018768352,
              0.03305061, -0.054260373, -0.02682501, 0.03628548, 0.031158516, -0.048675645, -0.017288245, 0.02929694,
              0.013450652, -0.0058365, 0.032745432, -0.027160704, -0.015655553, -0.032074045, 0.020248458, 0.004760753,
              0.04730235, -0.024841363, 0.020248458, 0.013786347, -0.010810876, -0.033874586, 0.008491535, 0.023651175,
              0.016021764, 0.0039329617, -0.04626475, 0.0050621144, -0.02720648, -0.008140582, 0.017440835,
              -0.029830998, 0.04861461, 0.042327974, 0.01529697, -0.027191222, -0.03515633, 0.018264811, 0.038696375,
              -0.025543269, 0.018676799, 0.023757987, 0.0058670174, -0.0045013526, 0.017059363, -0.03720101,
              -0.03668221, -0.0137253115, 0.024581963, 0.025589045, 0.01270297, -0.027450623, -0.035614092, 0.010299705,
              0.021041917, -0.013893158, 0.014350923, -0.032440256, -0.009338399, 0.006114973, 0.025344905, 0.03512581,
              -0.02917487, -0.018432658, 0.008873005, -0.014236482, -0.027359068, -0.055572633, 0.016784705,
              0.041900728, -0.019943282, 0.020080611, 0.018112222, 0.009033223, -0.021087693, -0.05041515, 0.0352784,
              0.024642998, 0.007118241, 0.008804341, -0.022384694, -0.030471869, -0.015762364, 0.048706163,
              0.0064659263, 0.0048790085, 0.003906259, -0.02384954, -0.012771634, -0.025985776, 0.0017061271, 0.0736696,
              0.020950364, 0.013847382, 0.029785221, -0.022201587, -0.003059394, 0.038574304, -0.01647953, -0.022354174,
              0.0562135, 0.001626972, -0.007865923, 0.012001064, 0.043609716, -0.0274964, 0.029846257, -0.0035266953,
              -0.00026106893, 0.050903432, 0.022750905, -0.037475668, -0.013244658, -0.015640294, 0.042419527,
              -0.027938904, -0.008247394, -0.0047111614, -0.019088788, -0.15368687, 0.033020094, 0.028350893,
              0.02449041, 0.016830482, 0.03189094, -0.04861461, -0.024261529, -0.05029308, 0.018386882, 0.028945986,
              -0.044525243, 0.009628317, 0.021667529, 0.026123105, 0.037384115, -0.007335679, -0.02149968, -0.0176392,
              -0.0210114, 0.00070810475, -0.05261242, 0.061340466, 0.0037002645, -0.010910058, -0.011360194,
              0.008201617, 0.03793343, -0.0070305024, -0.0225678, -0.00945284, 0.02281194, 0.0013446837, 0.023880057,
              -0.0144806225, 0.015914952, 0.018646281, 0.0032444072, 0.016494788, 0.01853947, 0.01985173, 0.03964242,
              0.015541111, 0.016494788, -0.031921457, -0.029693669, 0.020782517, -0.009796164, -0.0032234264,
              -0.046478376, 0.044647314, -0.035675127, -0.01853947, 0.0069885408, -0.07635515, -0.010986352, 0.00971987,
              0.034027174, 0.0347596, 0.02812201, -0.03213508, -0.05355847, -0.00038886155, -0.014061005, -0.08074969,
              0.020584151, 0.047760114, 0.03381355, 0.012809781, -0.020904588, 0.013954193, -0.04382334, 0.01062777,
              0.004421244, 0.039337244, 0.014549287, 0.013435394, 0.021316575, -0.01957707, -0.09228536, 0.006145491,
              0.0015955006, 0.0006575599, 0.010147117, -0.03137214, -0.048919786, 0.0044517615, 0.04214487, 0.053466916,
              0.22290088, 0.019592328, 0.021041917, -0.034790117, 0.034393385, -0.016616859, -0.0748903, 0.08294696,
              -0.009971641, -0.030548163, 0.010810876, 0.04147348, -0.025421198, -0.020614669, 0.019271893, 0.04562388,
              -0.071838535, 0.0140152285, 0.04455576, 0.016021764, 0.0033302382, -0.03851327, -0.05197155, -0.024795586,
              -0.04925548, -0.0012359646, -0.028152527, 0.020446822, -0.010955835, 0.007926959, -0.05679334, 0.04898082,
              0.02227788, 0.009887717, -0.037262045, -0.021865893, 0.024658257, -0.03305061, -0.005104076, 0.06274428,
              0.0026741086, -0.0032806469, -0.027450623, 0.016265905, -0.008514423, -0.011116052, -0.008338947,
              -0.020813035, -0.025711115, -0.021438645, -0.009872458, -0.04071054, -0.019348187, 0.0037441335,
              -0.0155868875, -0.0049705617, -0.009040852, 0.007850665, 0.031463694, 0.05029308, 0.002864844,
              0.0063552996, -0.056945927, -0.046051126, 0.006042494, 0.053833127, -0.013702422, -0.03045661,
              0.048187364, 0.029068056, -0.022766164, -0.002573019, 0.012855558, 0.005336773, -0.009414693,
              -0.046173196, -0.014053375, -0.0054741027, 0.001794819, 0.014472993, -0.00087928964, 0.004680644,
              0.02449041, 0.018325847, 0.054199338, -0.006156935, 0.028717104, 0.086425975, 0.02307134, 0.0060958997,
              -0.0008125323, 0.018829387, -0.011825588, 0.0032806469, 0.008880635, -0.019271893, -0.015991246,
              -0.008018511, -0.03149421, 0.00803377, -0.0137482, 0.0004093656, -0.049682725, -0.015518223, -0.034118727,
              -0.0069542085, -0.05297863, -0.0052299616, -0.0038566676, 0.0008196849, -0.037536703, -0.02383428,
              -0.033355787, -0.051239125, 0.007118241, 0.03488167, 0.028259339, 0.008842488, 0.009246847, 0.03970346,
              -0.019271893, 0.038543787, -0.022659352, 0.022720387, 0.024566704, -0.056030396, -0.0026283322,
              -0.009399435, 0.0077743703, -0.02191167, 0.0028667513, -0.028717104, 0.0070991674, 0.027038634,
              0.063964985, 0.0090103345, -0.0053215143, -0.022064257, -0.014091522, -0.0057983524, -0.021087693,
              0.006557479, -0.004325876, 0.045440774, 0.0065765525, 0.0015716588, -0.049804796, 0.03924569, -0.01918034,
              -0.021331834, 0.039093103, 0.017395059, 0.012664823, -0.052765008, 0.021331834, -0.07537858,
              -0.0061607496, -0.032043528, 0.0067978054, -0.0121917995, 0.0039978116, 0.0088196, 0.006580367,
              0.07238785, 0.0110092405, -0.0074196025, 0.009025593, 0.03085334, -0.03137214, -0.006259932, 0.011901882,
              -0.040741056, -0.030242987, 0.008834858, -0.019744916, -0.009712241, -0.0040588467, 0.033172682,
              0.004276285, -0.049072374, 0.03488167, -0.0051269643, 0.007694261, 0.005935682, 0.01788334, -0.0069542085,
              0.0085449405, -0.007194535, -0.041900728, -0.013313323, -0.0013895065, 0.07617205, 0.0037422262,
              -0.025009211, 0.0051345937, 0.0066299583, 0.10388207, -0.008834858, 0.006439223, -0.021102952,
              -0.03099067, -0.016555823, -0.0126571935, 0.010658287, 0.0057945377, -0.0055503966, -0.009681723,
              0.057617314, -0.017822305, -0.0034828263, 0.0005464566, 0.0043602088, -0.037109457, 0.010849023,
              -0.009216329, -0.049194444, 0.01179507, 0.049469102, -0.008514423, -0.009681723, -0.01890568, 0.03500374,
              -0.028228821, -0.05871595, 0.0011281992, 0.044799905, -0.0032806469, 0.009002705, 0.030120917,
              0.0073547526, -0.010025047, 0.019012494, -0.031433176, -0.02787787, 0.021621753, -0.011177087,
              -0.02630621, 0.042297456, -0.041046232, -0.020919846, -0.002534872, -0.024765069, 0.01632694,
              0.0029258793, -0.0018615763, -0.026748717, -0.030273505, 0.006763473, 0.036590658, 0.027236998,
              0.02307134, 0.031829905, 0.013107329, -0.025451716, 0.040252775, 0.04214487, 0.012710599, 0.01800541,
              -0.012130764, -0.056274537, 0.02009587, 0.03695687, 0.024963435, -0.030166693, 0.009002705, -0.06988541,
              0.043212987, 0.01840214, -0.01179507, -0.09484884, -0.023986869, 0.015319858, -0.023498587, -0.034790117,
              0.012176541, 0.0018901867, -0.00037646378, 0.051818963, 0.021804858, -0.05209362, -0.027710022,
              0.051391713, -0.022064257, -0.024139458, -0.018295329, -0.04092416, 0.0063667437, 0.022995045,
              0.0149460165, -0.030059882, 0.019134564, 0.017562905, -0.04962169, 0.015579258, 0.010223411,
              -0.0076675583, -0.059021126, 0.04431162, -0.023315482, 0.017517129, -0.0021457719, 0.042968843,
              0.028533999, -0.029449528, -0.016769446, 0.026367245, -0.015762364, -0.01140597, 0.030059882, 0.030929634,
              0.0058250558, -0.06689468, -0.013473541, 0.009323141, 0.025299128, -0.021728564, 0.049987905,
              -0.0020599412, 0.04287729, -0.022827199, 0.020828294, -0.001273158, -0.04068002, -0.013664275,
              -0.0036945425, -0.019775433, -0.024642998, -0.005275738, -0.036407553, -0.0008239764, -0.027435362,
              0.06427016, -0.012901335, -0.02035527, 0.020614669, -0.0017051734, 0.042480562, -0.0013942749,
              0.018981975, 0.030365057, 0.0028915468, 0.052642938, 0.03408821, -0.01878361, 0.0043525794, -0.014183076,
              0.0009870551, -0.011611964, -0.030273505, -0.010635399, 0.058776986, -0.03625496, -0.008270282,
              -0.03295906, 0.04794322, -0.0025119837, 0.045959573, -0.008773823, 0.048584092, 0.048828233, -0.056457642,
              0.06039442, -0.04522715, 0.015617405, 0.030960152, 0.047515973, 0.042572115, -0.069214016, 0.017959634,
              -0.0090484815, 0.02073674, -0.013839752, 0.035430986, -0.041046232, -0.009887717, 0.07043473, -0.02787787,
              0.010993982, -0.0017557183, 0.0028057161, -0.031204293, -0.0059700143, 0.0054741027, -0.023666434,
              -0.008903523, -0.021316575, 0.00014424356, 0.011863735, -0.0058136117, 0.004821788, -0.01710514,
              0.009384176, -0.02864081, -0.0058288705, -0.13269073, 0.019363446, -0.013923676, 0.025177058,
              -0.049194444, 0.015129123, -0.02359014, -0.009155294, 0.0034294203, -0.01878361, -0.0027256072,
              -0.000686647, -0.048034772, -0.018264811, 0.071228184, 0.037780844, -0.025726374, -0.028595034,
              -0.011177087, 0.031463694, -0.01075747, -0.035705645, 0.097290255, 0.010475182, -0.011199976, -0.02655035,
              -0.019241376, -0.021698046, -0.019638104, -0.016769446, -0.02165227, -0.06939713, 0.024658257, 0.05297863,
              0.04586802, 0.00984957, -0.009414693, 0.013458282, -0.014610323, 0.024581963, -0.023376517, 0.01269534,
              0.010284446, 0.023880057, -0.011383082, 0.101684794, -0.007423417, -0.048156846, -0.008140582,
              0.014602694, -0.0033321455, 0.019638104, 0.028976504, 0.025619563, 0.009086629, -0.007049576, 0.011596705,
              0.0047226055, -0.024215752, 0.07684343, -0.003227241, 0.016082799, -0.025207575, -0.025177058,
              -0.024002127, 0.017135657, -0.01969914, 0.043212987, 0.024185235, -0.02073674, -0.033874586,
              -0.0021591233, -0.045471292, -0.00071954884, -0.008132952, 0.019348187, 0.03948983, -0.033752516,
              -0.084961124, 0.0030994483, -0.041381925, -0.041015714, 0.0112839, -0.019836469, 0.032104563, 0.016098058,
              0.020080611, -0.007942217, -0.050140493, -0.034393385, -0.05297863, -0.028137268, -0.0058174264,
              -0.0056114323, -0.03189094, 0.021026658, -0.011756923, -0.027267516, 0.006385817, -0.04718028,
              -0.012519864, -0.035949785, 0.013076811, -0.02317815, -0.031860422, 0.044769388, -0.015480076,
              -0.008018511, -0.043518163, 0.023422293, -0.036895834, -0.040100187, -0.06039442, 0.005691541,
              -0.036529623, -0.018585246, 0.023635916, 0.021408128, 0.01152804, 0.013984711, 0.007965106, -0.027801575,
              -0.0026226102, -0.021286057, 0.006011976, 0.027389586, 0.0840456, 0.07476823, 0.028564516, 0.015029941,
              0.029342717, -0.047760114, -0.0241242, 0.031082222, 0.017837564, 0.023346, -0.002166753, 0.046295267,
              -0.033111647, -0.017715493, -0.016937293, -0.0036678396, -0.01606754, -0.010551476, -0.060730115,
              -0.00067806395, 0.005714429, 0.009002705, -0.056549195, -0.053497434, 0.027160704, -0.023803763,
              -0.02877814, 0.03189094, -0.015838658, -0.025878964, 0.00014889274, -0.02319341, -0.0028724733,
              0.053222775, -0.0040893643, -0.0034313279, 0.00036740385, 0.0049057114, 0.011291529, 0.056518678,
              -0.007972735, -0.041381925, -0.04467783, 0.008804341, 0.026519833, 0.052337762, -0.021209763,
              -0.019119306, 0.020126387, 0.00997927, -0.007755297, 0.020492598, -0.014915499, -0.038421717, 0.037353598,
              -0.0050888173, 0.029708927, 0.04638682, -0.052917596, -0.0112839, 0.0038433159, -0.011001611,
              -0.0023708395, 0.015991246, -0.03381355, 0.017135657, 0.016418492, -0.029449528, 0.047332868,
              -0.002183919, 0.018173259, 0.0017023124, 0.01814274, 0.01153567, 0.00042152498, -0.021179246, 0.058441292,
              -0.0020771073, -0.036102373, 0.007740038, -0.0042419527, -0.02839667, 0.007713335, -0.016708411,
              -0.020538375, 0.0044899085, -0.011131311, 0.0032844616, -0.036468588, -0.005886091, 0.05523694,
              -0.015098605, -0.03161628, 0.02462774, 0.028488223, 0.013404876, -0.012916594, -0.012420681, -0.036377035,
              -0.01335147, -0.040344328, 0.029144352, -0.04174814, 0.023315482, -0.02227788, -0.0022716573, -0.03152473,
              0.0482484, -0.027038634, -0.004882823, 0.06152357, -0.003881463, -0.036041338, -0.0075645614, 0.020660445,
              -0.07250992, -0.024429375, -0.036377035]
    # searchVector(db_name="memtensor_memos", vectorStr=vector, user_name="memos7a9f9fbbb61c412f94f77fbaa8103c35")


    # searchVector(db_name="test_1020_02", vectorStr=vector)

    # add_edge(db_name="memtensor_memos",source_id="13bb9df6-0609-4442-8bed-bba77dadac92", target_id="2dd03a5b-5d5f-49c9-9e0a-9a2a2899b98d", edge_type="PARENT", user_name="memosbfb3fb32032b4077a641404dc48739cd")
    # edge_exists(db_name="memtensor_memos", source_id="13bb9df6-0609-4442-8bed-bba77dadac92",
    #             target_id="2dd03a5b-5d5f-49c9-9e0a-9a2a2899b98d", type="PARENT", direction="OUTGOING",
    #             user_name="memosbfb3fb32032b4077a641404dc48739cd")

    # get_children_with_embeddings(db_name="memtensor_memos", id="13bb9df6-0609-4442-8bed-bba77dadac92",user_name="memos07ea708ac7eb412887c5c283f874ea30")

    # get_subgraph(db_name="memtensor_memos", center_id="13bb9df6-0609-4442-8bed-bba77dadac92", depth=1,
    #              center_status="activated", user_name="memos07ea708ac7eb412887c5c283f874ea30")

    #
    get_grouped_counts(db_name="memtensor_memos", user_name="memos07ea708ac7eb412887c5c283f874ea30")

    # export_graph(db_name="memtensor_memos", include_embedding=False, user_name="memos8698ecb1f76940ff9adc12494c4d57a6")

    # get_structure_optimization_candidates(db_name="memtensor_memos", scope='UserMemory', include_embedding=False, user_name="memos8f5530534d9b413bb8981ffc3d48a495")

    # get_all_memory_items(db_name="memtensor_memos", scope='UserMemory', include_embedding=True, user_name="memos8f5530534d9b413bb8981ffc3d48a495")
    
    # 测试 get_structure_optimization_candidates 函数
    # get_structure_optimization_candidates(db_name="memtensor_memos", scope='UserMemory', include_embedding=False, user_name="memos8f5530534d9b413bb8981ffc3d48a495")
